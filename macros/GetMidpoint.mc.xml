<Macro Name="GetMidpoint">
	<Argument>
		<Lat1/>
		<Lon1/>
		<Lat2/>
		<Lon2/>
	</Argument>
	<Result>
		<Log Message="Calculating Midpoint..." />
		<Log Message="Midpoint...Lat1: [:$Macro.Argument.Lat1:]" />
		<Log Message="Midpoint...Lon1: [:$Macro.Argument.Lon1:]" />
		<Log Message="Midpoint...Lat2: [:$Macro.Argument.Lat2:]" />
		<Log Message="Midpoint...Lon2: [:$Macro.Argument.Lon2:]" />
		
		<JavaScript>
			var lt1 = parseFloat("[:$Macro.Argument.Lat1:]");
			var ln1 = parseFloat("[:$Macro.Argument.Lon1:]");
			var lt2 = parseFloat("[:$Macro.Argument.Lat2:]");
			var ln2 = parseFloat("[:$Macro.Argument.Lon2:]");
			
			Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
			Number.prototype.toRadians = function() { return this * Math.PI / 180; }
			
			Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
			Number.prototype.toRadians = function() { return this * Math.PI / 180; }
			
			function calMidPoint(lat1, lon1, lat2, lon2) {
				var lt1 = lat1.toRadians();
				var ln1 = lon1.toRadians();
				var lt2 = lat2.toRadians();
				var lonDiff = (lon2-lon1).toRadians();

				var Bx = Math.cos(lt2) * Math.cos(lonDiff);
				var By = Math.cos(lt2) * Math.sin(lonDiff);

				var x = Math.sqrt((Math.cos(lt1) + Bx) * (Math.cos(lt1) + Bx) + By * By);
				var y = Math.sin(lt1) + Math.sin(lt2);
				var lt3 = Math.atan2(y, x);

				var ln3 = ln1 + Math.atan2(By, Math.cos(lt1) + Bx);
				
				//return new LatLon(lt3, ln3);
				//return new LatLon(lt3.toDegrees(), (ln3.toDegrees()+540)%360-180); 
				sffContext.setResponseData("Message.Value.Result.Lat",lt3.toDegrees());
				sffContext.setResponseData("Message.Value.Result.Lon", (ln3.toDegrees()+540)%360-180);
			}
			
			calMidPoint(lt1, ln1, lt2, ln2);
		</JavaScript>
	</Result>
</Macro>