<Macro Name="GetOptimumValues">
  <Argument>
    <String name="ZoneName" />
    <Number name="CurrentTemp" />
    <Number name="CurrentHumidity" />
  </Argument>
  <Result>
      <Log message="GetOptimumValues: ZoneName: [:$Macro.Argument.ZoneName:]" />
      <Log message="GetOptimumValues: CurrentTemp: [:$Macro.Argument.CurrentTemp:]" />
      <Log message="GetOptimumValues: CurrentHumidity: [:$Macro.Argument.CurrentHumidity:]" />
      <DoRequest target="[:RuntimeParams.WdlFacetIDName:]">
        <Process>
          <Message>
            <Value>
              <Workflow Limit="1" Live="1">
                <Task name="Main" while="true">
          
                  <Invoke Name="CreateCommand">
                    <JavaScript>
                      var command = "java -jar [:RuntimeParams.SpacesLocation:]OptimumFarmValueCalculator.jar";
                      var currentTemp = parseInt('[:$Macro.Argument.CurrentTemp:]');
                      var currentHumidity = parseInt('[:$Macro.Argument.CurrentHumidity:]');

                      sffLog.info("currentTemp type:"+typeof currentTemp);
                      sffLog.info("currentHumidity type:" +typeof currentHumidity);

                      var outputFile = String("[:RuntimeParams.SpacesLocation:]OptimumZoneValues_[:$Macro.Argument.ZoneName:].txt");
                      
                      sffLog.info("Before calling jar file  : " + command);
                      
                      command = command.concat(" "+currentTemp + " "+currentHumidity);
                      command = command.concat(" \"" + outputFile + "\"");
                      
                      sffLog.info("Command to call Optimum value Algorithm : " + command);
                      command;
                    </JavaScript>
                  </Invoke>
                  
                  <Invoke name="ExecuteCommand" execute="[:Invoke.CreateCommand:]"/>
                  <Log Message="Check Command Status : [:Invoke.ExecuteCommand:]"/>
				  
				          <Invoke name="WriteToModel">
                    <JavaScript>
					            var optQuantityPest = 0;
                      var optQuantityUnitPest ="ml";
                      var optQuantityFert = 0;
                      var optQuantityUnitFert ="gms";
                        
						          var file = new java.io.File("[:RuntimeParams.SpacesLocation:]OptimumZoneValues_[:$Macro.Argument.ZoneName:].txt");
                   		sffLog.info("File : " + file.getAbsolutePath());
                  		var fileData = sff.loadTxt("text", file.getAbsolutePath());
                  		sffLog.info(fileData); /* #Pesticide:2:ml#Ferilizer:4:gm */
						
                      var splitted = fileData.split("#");								
						
						          for(i= splitted.length -1; i!=0; i--){
				                if(splitted[i].startsWith("Pesticide"))
				                {
        									var pestcideData = splitted[i].split(":");
        									optQuantityPest = pestcideData[1];
        									optQuantityUnitPest =   pestcideData[2];
        				             
				                }
				                else if(splitted[i].startsWith("Ferilizer"))
				                {
        									var fertizerData = splitted[i].split(":");  
        									optQuantityFert = fertizerData[1];
        									optQuantityUnitFert = fertizerData[2];
        								}
						          }
						
          						sffLog.info( "optimum Quantity Pesticide:: " + optQuantityPest + " opt Quantity Pesticide Unit:: "+ optQuantityUnitPest + " opt Quantity Fertilizer:: " + optQuantityFert + " opt Quantity Fertilizer Unit:: " +optQuantityUnitFert);

                      Variable.pesticide=optQuantityPest;
                      Variable.pesticideUnit=optQuantityUnitPest;
                      Variable.fertilizer=optQuantityFert;
                      Variable.fertilizerUnit=optQuantityUnitFert;
                      {};
                      
                    </JavaScript>
                  </Invoke>

                  <Invoke name="updateZoneAggregate" >
                    <FacetScript>
                      <Log message="Updated values:: [:Variable.fertilizer:]" />
                      <Log message="ZoneName:: [:$Macro.Argument.ZoneName:]" />
                      <Log message="Fert:: [:Variable.fertilizer:]" />
                      <Log message="Pest:: [:Variable.pesticide:]" />
                      <!-- <updateZoneAggregate>
                        <ZoneName>[:$Macro.Argument.ZoneName:]</ZoneName>
                        <Pesticide>[:Variable.pesticide:]</Pesticide>
                        <Fertilizer>[:Variable.fertilizer:]</Fertilizer>
                      </updateZoneAggregate> -->
                      <executeQuery>
                        <QueryString>
                          <Query>
                            <Find format="version, current">
                              <ZoneAggregate>
                                <ZoneName eq="[:$Macro.Argument.ZoneName:]"/>
                              </ZoneAggregate>
                            </Find>
                            <SetResponseData>
                              <Key>Message.Value.Find.Result.ZoneAggregate.PesticideInfo.OptimumValue.Value</Key>
                              <Value>[:Variable.pesticide:]</Value>
                            </SetResponseData>
                            <SetResponseData>
                              <Key>Message.Value.Find.Result.ZoneAggregate.Fertilizer.OptimumValue.Value</Key>
                              <Value>[:Variable.fertilizer:]</Value>
                            </SetResponseData>
                             <Update>
                              <from>Result</from>
                              <Include>$Response.Message.Value.Find</Include>
                            </Update>

                            <!-- <Log message="ZoneName Update:: [:$Macro.Argument.ZoneName:]" />
                            <Log message="Fert Update:: [:Variable.fertilizer:]" />
                            <Log message="Pest Update: [:Variable.pesticide:]" /> -->
                           
                          </Query>
                        </QueryString>
                      </executeQuery>
                    </FacetScript>
                  </Invoke>
                </Task>
              </Workflow>
            </Value>
          </Message>
        </Process>
      </DoRequest>
  </Result>
</Macro>
